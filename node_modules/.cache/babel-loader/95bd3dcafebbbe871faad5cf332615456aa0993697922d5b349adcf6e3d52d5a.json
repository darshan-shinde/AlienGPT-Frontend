{"ast":null,"code":"var _jsxFileName = \"D:\\\\AlienGPT-Frontend\\\\src\\\\components\\\\BaseLayout.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { Container } from \"@mui/material\";\nimport { Light as SyntaxHighlighter } from \"react-syntax-highlighter\";\nimport { paraisoDark } from \"react-syntax-highlighter/dist/esm/styles/hljs\";\nimport logo from \"../images/d753cd31d66585bc9c91332b8a7b25fc-removebg-preview.png\";\nimport Header from \"./Header\";\nimport ChatBox from \"./ChatBox\";\nimport Footer from \"./Footer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BaseLayout = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [inputText, setInputText] = useState(\"\");\n  const [isGenerating, setIsGenerating] = useState(false);\n  const renderContent = text => {\n    const codeRegex = /```([\\s\\S]*?)```/g;\n    let codeBlocks = [];\n    let match;\n    while ((match = codeRegex.exec(text)) !== null) {\n      codeBlocks.push(match[1]);\n    }\n    let formattedText = text.replace(codeRegex, \"\").trim();\n    let formattedElements = [];\n    const lines = formattedText.split(\"\\n\");\n    lines.forEach((line, index) => {\n      var _lines;\n      if (line.startsWith(\"**\") && (_lines = lines[index + 1]) !== null && _lines !== void 0 && _lines.startsWith(\"* \")) {\n        const title = line.replace(\"**\", \"\").trim();\n        const mainPoint = lines[index + 1].replace(\"*\", \"\").trim();\n        formattedElements.push(/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: mainPoint\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 13\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 11\n        }, this));\n      } else if (line.includes(\"**\")) {\n        const boldText = line.split(\"**\").map((part, idx) => idx % 2 === 1 ? /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: part\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 29\n        }, this) : part);\n        formattedElements.push(/*#__PURE__*/_jsxDEV(\"p\", {\n          children: boldText\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 32\n        }, this));\n      } else if (line.startsWith(\"* \")) {\n        formattedElements.push(/*#__PURE__*/_jsxDEV(\"ul\", {\n          style: {\n            listStyleType: \"none\",\n            paddingLeft: \"20px\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"li\", {\n            style: {\n              position: \"relative\",\n              paddingLeft: \"20px\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                position: \"absolute\",\n                left: \"0\",\n                top: \"0\",\n                fontWeight: \"bold\"\n              },\n              children: \"\\u2022\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 15\n            }, this), line.replace(\"*\", \"\").trim()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 13\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this));\n      } else {\n        formattedElements.push(/*#__PURE__*/_jsxDEV(\"p\", {\n          children: line\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 32\n        }, this));\n      }\n    });\n    const codeElements = codeBlocks.map((code, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: \"10px\",\n        backgroundColor: \"#525252\",\n        padding: \"10px\",\n        borderRadius: \"15px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(SyntaxHighlighter, {\n        language: \"auto\",\n        style: paraisoDark,\n        children: code\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this));\n    return [...formattedElements, ...codeElements];\n  };\n  const generateResponse = async selectedFile => {\n    if (!inputText.trim() && !selectedFile) return;\n    const formData = new FormData();\n    formData.append(\"messages\", JSON.stringify([...messages, {\n      role: \"user\",\n      content: inputText\n    }]));\n    if (selectedFile) {\n      formData.append(\"file\", selectedFile);\n    }\n    try {\n      setIsGenerating(true);\n      const response = await fetch(\"/api/chat\", {\n        method: \"POST\",\n        mode: \"cors\",\n        body: formData\n      });\n      const data = await response.json();\n      if (data.status === \"success\") {\n        const assistantResponse = {\n          role: \"assistant\",\n          content: data.response\n        };\n        setMessages(prev => [...prev, assistantResponse]);\n      } else {\n        console.error(\"API Error:\", data.error);\n      }\n    } catch (error) {\n      console.error(\"Request Error:\", error);\n    } finally {\n      setIsGenerating(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    lg: 10,\n    sx: {\n      minHeight: \"96vh\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      fontFamily: \"poppins\",\n      scrollbarWidth: \"none\",\n      \"&::-webkit-scrollbar\": {\n        display: \"none\"\n      }\n    },\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      logo: logo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatBox, {\n      messages: messages,\n      isGenerating: isGenerating,\n      renderContent: renderContent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {\n      inputText: inputText,\n      setInputText: setInputText,\n      generateResponse: generateResponse,\n      isGenerating: isGenerating\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 5\n  }, this);\n};\n_s(BaseLayout, \"JUCxLVkwkFzAkDAGAVZA1YlINj4=\");\n_c = BaseLayout;\nexport default BaseLayout;\nvar _c;\n$RefreshReg$(_c, \"BaseLayout\");","map":{"version":3,"names":["React","useState","Container","Light","SyntaxHighlighter","paraisoDark","logo","Header","ChatBox","Footer","jsxDEV","_jsxDEV","BaseLayout","_s","messages","setMessages","inputText","setInputText","isGenerating","setIsGenerating","renderContent","text","codeRegex","codeBlocks","match","exec","push","formattedText","replace","trim","formattedElements","lines","split","forEach","line","index","_lines","startsWith","title","mainPoint","children","fileName","_jsxFileName","lineNumber","columnNumber","includes","boldText","map","part","idx","style","listStyleType","paddingLeft","position","left","top","fontWeight","codeElements","code","marginBottom","backgroundColor","padding","borderRadius","language","generateResponse","selectedFile","formData","FormData","append","JSON","stringify","role","content","response","fetch","method","mode","body","data","json","status","assistantResponse","prev","console","error","lg","sx","minHeight","display","flexDirection","fontFamily","scrollbarWidth","_c","$RefreshReg$"],"sources":["D:/AlienGPT-Frontend/src/components/BaseLayout.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { Container } from \"@mui/material\";\r\nimport { Light as SyntaxHighlighter } from \"react-syntax-highlighter\";\r\nimport { paraisoDark } from \"react-syntax-highlighter/dist/esm/styles/hljs\";\r\nimport logo from \"../images/d753cd31d66585bc9c91332b8a7b25fc-removebg-preview.png\";\r\nimport Header from \"./Header\";\r\nimport ChatBox from \"./ChatBox\";\r\nimport Footer from \"./Footer\";\r\n\r\nconst BaseLayout = () => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [inputText, setInputText] = useState(\"\");\r\n  const [isGenerating, setIsGenerating] = useState(false);\r\n\r\n  const renderContent = (text) => {\r\n    const codeRegex = /```([\\s\\S]*?)```/g;\r\n    let codeBlocks = [];\r\n    let match;\r\n\r\n    while ((match = codeRegex.exec(text)) !== null) {\r\n      codeBlocks.push(match[1]);\r\n    }\r\n\r\n    let formattedText = text.replace(codeRegex, \"\").trim();\r\n\r\n    let formattedElements = [];\r\n    const lines = formattedText.split(\"\\n\");\r\n\r\n    lines.forEach((line, index) => {\r\n      if (line.startsWith(\"**\") && lines[index + 1]?.startsWith(\"* \")) {\r\n        const title = line.replace(\"**\", \"\").trim();\r\n        const mainPoint = lines[index + 1].replace(\"*\", \"\").trim();\r\n        formattedElements.push(\r\n          <div key={index}>\r\n            <h3>{title}</h3>\r\n            <p>{mainPoint}</p>\r\n          </div>\r\n        );\r\n      } else if (line.includes(\"**\")) {\r\n        const boldText = line\r\n          .split(\"**\")\r\n          .map((part, idx) =>\r\n            idx % 2 === 1 ? <strong key={idx}>{part}</strong> : part\r\n          );\r\n        formattedElements.push(<p key={index}>{boldText}</p>);\r\n      } else if (line.startsWith(\"* \")) {\r\n        formattedElements.push(\r\n          <ul\r\n            key={index}\r\n            style={{ listStyleType: \"none\", paddingLeft: \"20px\" }}\r\n          >\r\n            <li style={{ position: \"relative\", paddingLeft: \"20px\" }}>\r\n              <span\r\n                style={{\r\n                  position: \"absolute\",\r\n                  left: \"0\",\r\n                  top: \"0\",\r\n                  fontWeight: \"bold\",\r\n                }}\r\n              >\r\n                •\r\n              </span>\r\n              {line.replace(\"*\", \"\").trim()}\r\n            </li>\r\n          </ul>\r\n        );\r\n      } else {\r\n        formattedElements.push(<p key={index}>{line}</p>);\r\n      }\r\n    });\r\n\r\n    const codeElements = codeBlocks.map((code, index) => (\r\n      <div\r\n        key={index}\r\n        style={{\r\n          marginBottom: \"10px\",\r\n          backgroundColor: \"#525252\",\r\n          padding: \"10px\",\r\n          borderRadius: \"15px\",\r\n        }}\r\n      >\r\n        <SyntaxHighlighter language=\"auto\" style={paraisoDark}>\r\n          {code}\r\n        </SyntaxHighlighter>\r\n      </div>\r\n    ));\r\n\r\n    return [...formattedElements, ...codeElements];\r\n  };\r\n\r\n const generateResponse = async (selectedFile) => {\r\n   if (!inputText.trim() && !selectedFile) return;\r\n\r\n   const formData = new FormData();\r\n   formData.append(\r\n     \"messages\",\r\n     JSON.stringify([...messages, { role: \"user\", content: inputText }])\r\n   );\r\n   if (selectedFile) {\r\n     formData.append(\"file\", selectedFile);\r\n   }\r\n\r\n   try {\r\n     setIsGenerating(true);\r\n\r\n     const response = await fetch(\r\n       \"/api/chat\",\r\n       {\r\n         method: \"POST\",\r\n         mode: \"cors\",\r\n         body: formData,\r\n       }\r\n     );\r\n\r\n     const data = await response.json();\r\n\r\n     if (data.status === \"success\") {\r\n       const assistantResponse = { role: \"assistant\", content: data.response };\r\n       setMessages((prev) => [...prev, assistantResponse]);\r\n     } else {\r\n       console.error(\"API Error:\", data.error);\r\n     }\r\n   } catch (error) {\r\n     console.error(\"Request Error:\", error);\r\n   } finally {\r\n     setIsGenerating(false);\r\n   }\r\n };\r\n\r\n\r\n  return (\r\n    <Container\r\n      lg={10}\r\n      sx={{\r\n        minHeight: \"96vh\",\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        fontFamily: \"poppins\",\r\n        scrollbarWidth: \"none\",\r\n        \"&::-webkit-scrollbar\": {\r\n          display: \"none\",\r\n        },\r\n      }}\r\n    >\r\n      <Header logo={logo} />\r\n      <ChatBox\r\n        messages={messages}\r\n        isGenerating={isGenerating}\r\n        renderContent={renderContent}\r\n      />\r\n      <Footer\r\n        inputText={inputText}\r\n        setInputText={setInputText}\r\n        generateResponse={generateResponse}\r\n        isGenerating={isGenerating}\r\n      />\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default BaseLayout;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}